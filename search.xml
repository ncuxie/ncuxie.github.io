<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>苍穹外卖 项目</title>
      <link href="/2023/08/11/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/"/>
      <url>/2023/08/11/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/</url>
      
        <content type="html"><![CDATA[<h4 id="swagger"><a href="#swagger" class="headerlink" title="swagger"></a>swagger</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类，注册web层相关组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtTokenAdminInterceptor jwtTokenAdminInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册自定义拦截器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始注册自定义拦截器...&quot;</span>);</span><br><span class="line">        registry.addInterceptor(jwtTokenAdminInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/admin/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/admin/employee/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过knife4j生成接口文档</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApiInfo</span> <span class="variable">apiInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;2.0&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.sky.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置静态资源映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/doc.html&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h4><ul><li>属性上加注解 @JsonFormat(pattern&#x3D;”yyyy-MM-dd HH:mm:ss”)</li><li>在 WebMvcConfigration 中扩展Spring MVC的消息转换器，统一处理</li></ul><h4 id="公共字段自动填充"><a href="#公共字段自动填充" class="headerlink" title="公共字段自动填充"></a>公共字段自动填充</h4><p>问题：每次操作都需要为 create_user,create_time 等属性赋值，存在大量重复代码。</p><p>解决方案：注解 + AOP + 反射</p><ul><li>自定义注解AutoFill,用于标识需要进行公共字段自动填充的方法</li><li>自定义切面类AutoFillAspect,统一拦截加入了AutoFill注解的方法,通过反射为公共字段赋值</li><li>在Mapper的方法上加入AutoFill注解</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> springMVC </tag>
            
            <tag> mybatis </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="/2023/08/04/Mybatis/"/>
      <url>/2023/08/04/Mybatis/</url>
      
        <content type="html"><![CDATA[<p>Mybatis是一个优秀的 <code>持久层</code> 框架，用于简化 JDBC 的开发。</p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><h4 id="XML映射文件"><a href="#XML映射文件" class="headerlink" title="XML映射文件"></a>XML映射文件</h4><ul><li>映射配置文件名与Mapper接口名一致,且放在相同的包下(同包同名)。 </li><li>映射配置文件的namespace属性与Mapper接口的全类名一致。 </li><li>XML映射文件中sql语句的id与Mapper接口中的方法名一致。</li></ul><h4 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.driver-class-name=org.mariadb.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mariadb://localhost:3306/studentsdb</span><br><span class="line">spring.datasource.username=stu</span><br><span class="line">spring.datasource.password=stu</span><br><span class="line">mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</span><br><span class="line">mybatis.configuration.map-underscore-to-camel-case=true</span><br></pre></td></tr></table></figure><h4 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h4><p>druid Hikari</p><h4 id="lombok"><a href="#lombok" class="headerlink" title="lombok"></a>lombok</h4><p>Lombok项目是一个java库，它可以自动插入到编辑器和构建工具中，增强java的性能。 不需要再写getter、setter或equals方法，只要有一个注解，就有一个功能齐全的构建器、自动记录变量等等。<br><code>@Slf4j</code> 自动定义log</p><h4 id="pageHelper"><a href="#pageHelper" class="headerlink" title="pageHelper"></a>pageHelper</h4><p>自动分页</p><h3 id="基础-CRUD"><a href="#基础-CRUD" class="headerlink" title="基础 CRUD"></a>基础 CRUD</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from student_info_copy1&quot;)</span></span><br><span class="line">List&lt;Student&gt; <span class="title function_">listAll</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h4 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h4><p>起别名 手动结果映射 开启驼峰(camel)命名映射</p><h3 id="动态-SQL"><a href="#动态-SQL" class="headerlink" title="动态 SQL"></a>动态 SQL</h3><p><if> <foreach> <sql> <include></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;searchStu&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.mybatisquickstart.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student_info_copy1</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">            name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span></span><br><span class="line">            and gender = #&#123;gender&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="杂乱无章的角落"><a href="#杂乱无章的角落" class="headerlink" title="杂乱无章的角落"></a>杂乱无章的角落</h3><p>数据库索引默认是B+树(多路平衡搜索树)实现<br>01-由浅入深手把手教你精通新版SpringSecurity<br>02-Redis营销视频制作<br>03-史上最全java日志攻略<br>04-带你玩转Zookeeper Dubbo<br>05-数据结构与算法-【优化精简最终版】<br>06-《分布发布订阅消息系统》–Kafka深入探秘者来了<br>07-MongoDB用起来-快速上手和集群搭建<br>08-带你全面理解springcloud微服务架构体系<br>09-数据层全栈方案 springdata 高级应用<br>10-ELK搜索高级<br>11-深入解析docker容器化技术<br>12-全面学习Mybatis插件之Mybatis-Plus<br>13-解密JVM<br>14-微服务架构的分布式事物控制解决方案<br>@ConfigrationProperties 将外部属性批量注入</p><h4 id="windows-Git-Bash-查杀进程"><a href="#windows-Git-Bash-查杀进程" class="headerlink" title="windows Git Bash 查杀进程"></a>windows Git Bash 查杀进程</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano|findstr <span class="string">&quot;8080&quot;</span></span><br><span class="line">tskill 12345</span><br></pre></td></tr></table></figure><h2 id="遇到的问题-o-O"><a href="#遇到的问题-o-O" class="headerlink" title="遇到的问题 (o_O)?"></a>遇到的问题 (o_O)?</h2><h3 id="Access-denied"><a href="#Access-denied" class="headerlink" title="Access denied"></a>Access denied</h3><p>创建一个user并赋予其数据库权限即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue</title>
      <link href="/2023/07/28/vue/"/>
      <url>/2023/07/28/vue/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-Vue？"><a href="#什么是-Vue？" class="headerlink" title="什么是 Vue？"></a>什么是 Vue？</h2><p>Vue (发音为 &#x2F;vjuː&#x2F;，类似 view) 是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。</p><p>下面是一个最基本的示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span></span><br><span class="line">    Count is: &#123;&#123; count &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的示例展示了 Vue 的两个核心功能：</p><ul><li><em><strong>声明式渲染</strong></em>：Vue 基于标准 HTML 拓展了一套模板语法，使得我们可以声明式地描述最终输出的 HTML 和 JavaScript 状态之间的关系。</li><li><em><strong>响应性</strong></em>：Vue 会自动跟踪 JavaScript 状态并在其发生变化时响应式地更新 DOM。</li></ul><p><strong>ES 模块语法</strong><br>现代浏览器大多都已原生支持 ES 模块。因此我们可以像这样通过 CDN 以及原生 ES 模块使用 Vue：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;https://unpkg.com/vue@3/dist/vue.esm-browser.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">······</span></span><br></pre></td></tr></table></figure><p>注意这里使用了 &lt;script type&#x3D;”module”&gt;，且导入的 CDN URL 指向的是 Vue 的 ES 模块构建版本。</p><p>上面的示例使用了完整的 CDN URL 来导入，但你也可能会看到如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br></pre></td></tr></table></figure><p>我们可以使用导入映射表 (Import Maps) 来告诉浏览器如何定位到导入的 vue：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;importmap&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;imports&quot;</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;vue&quot;</span>: <span class="string">&quot;https://unpkg.com/vue@3/dist/vue.esm-browser.js&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>随着对 vue 的逐步深入，我们可能需要将代码分割成单独的 JavaScript 文件，以便更容易管理。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./my-component.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">createApp</span>(<span class="title class_">MyComponent</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// my-component.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div&gt;count is &#123;&#123; count &#125;&#125;&lt;/div&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果直接在浏览器中打开了上面的 <code>index.html</code>，你会发现它抛出了一个错误，因为 ES 模块不能通过 <code>file://</code> 协议工作，也即是当你打开一个本地文件时浏览器使用的协议。</p><p>由于安全原因，ES 模块只能通过 <code>http://</code> 协议工作，也即是浏览器在打开网页时使用的协议。为了使 ES 模块在我们的本地机器上工作，我们需要使用本地的 HTTP 服务器，通过 <code>http://</code> 协议来提供 <code>index.html</code>。</p><p>要启动一个本地的 HTTP 服务器，先安装 <a href="https://nodejs.org/zh/">Node.js</a>，然后通过命令行在 HTML 文件所在文件夹下运行 <code>npx serve</code>。你也可以使用其他任何可以基于正确的 MIME 类型服务静态文件的 HTTP 服务器。</p><p>可能你也注意到了，这里导入的组件模板是内联的 JavaScript 字符串。如果你正在使用 VSCode，你可以安装 <a href="https://marketplace.visualstudio.com/items?itemName=Tobermory.es6-string-html">es6-string-html</a> 扩展，然后在字符串前加上一个前缀注释 <code>/*html*/</code> 以高亮语法。</p><h2 id="声明式渲染"><a href="#声明式渲染" class="headerlink" title="声明式渲染"></a>声明式渲染</h2><p>Vue 的核心功能是<em><strong>声明式渲染</strong></em>：通过扩展于标准 HTML 的模板语法，我们可以根据 JavaScript 的状态来描述 HTML 应该是什么样子的。当状态改变时，HTML 会自动更新。</p><p>能在改变时触发更新的状态被称作是<em><strong>响应式</strong></em>的。我们可以使用 Vue 的 <code>reactive()</code> API 来声明响应式状态。由 <code>reactive()</code> 创建的对象都是 JavaScript <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy</a>，其行为与普通对象一样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counter = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter.<span class="property">count</span>) <span class="comment">// 0</span></span><br><span class="line">counter.<span class="property">count</span>++</span><br></pre></td></tr></table></figure><p><code>reactive()</code> 只适用于对象 (包括数组和内置类型，如 Map 和 Set)。而另一个 API <code>ref()</code> 则可以接受任何值类型。<code>ref</code> 会返回一个包裹对象，并在 <code>.value</code> 属性下暴露内部值。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="Vue-的生命周期"><a href="#Vue-的生命周期" class="headerlink" title="Vue 的生命周期"></a>Vue 的生命周期</h3><img src="https://v2.cn.vuejs.org/images/lifecycle.png" width="80%" height="80%"><h3 id="Vue2-CDN"><a href="#Vue2-CDN" class="headerlink" title="Vue2 CDN"></a>Vue2 CDN</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习记录</title>
      <link href="/2023/07/20/java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/07/20/java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>head first java</p><span id="more"></span><h2 id="JavaSE"><a href="#JavaSE" class="headerlink" title="JavaSE"></a>JavaSE</h2><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p><strong>反射的作用</strong></p><ul><li>获取任意类的所有信息</li><li>结合配置文件动态创建对象</li></ul><p><strong>获取class字节码文件对象的三种方法</strong></p><ul><li>class.forName(“全类名”);</li><li>类名.class;</li><li>对象.getClass();</li></ul><p><strong>获取构造方法，成员方法，成员变量</strong></p><ul><li>get: Constructor Filed Method</li><li>set: Parameter Modifiers Declared</li></ul><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>数据类型不确定时使用</p><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h3><p>定义:<br>        1.任意 节点最多有两个子节点<br>        2.任意 当前节点大于左子树节点<br>        3.任意 当前节点小于右子树节点</p><h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><p>定义: 任意节点，左右子树高度差不大于1</p><p><strong>平衡二叉树 如何保持平衡？</strong><br>左旋 or 右旋</p><ul><li>在 左子树的左子树 插入节点<br>  一次右旋</li><li>在 左子树的右子树 插入节点<br>  局部左旋 -&gt; 一次右旋</li><li>在 右子树的右子树 插入节点<br>  一次左旋</li><li>在 右子树的左子树 插入节点<br>  局部右旋 -&gt; 一次左旋</li></ul><h3 id="红黑树-B树"><a href="#红黑树-B树" class="headerlink" title="红黑树(B树)"></a>红黑树(B树)</h3><p>不是高度平衡的，不如平衡二叉树严格，但满足红黑规则。</p><ol><li>节点是红色或者黑色</li><li>根节点为黑色（Nil）</li><li>叶子节点为黑色</li><li>两个红色节点不能相恋</li><li>任意节点到其所有后代叶节点的简单路径上，黑色节点数目相同<br>添加的节点默认是红色的<br><img src="/img/Snipaste_2023-07-20_22-17-25.png" alt="红黑策略"></li></ol><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p><a href="https://www.bilibili.com/video/BV1yW4y1Y7Ms?p=167"><strong>video</strong></a><br> volatile<br> JMM<br> 乐观锁、悲观锁，CAS<br> 原子性<br> 并发工具类</p><h2 id="杂乱记录"><a href="#杂乱记录" class="headerlink" title="杂乱记录"></a>杂乱记录</h2><p><a href="https://www.zhihu.com/question/32212996">tomcat 与 nginx，apache的区别是什么？</a></p><h2 id="放松一下"><a href="#放松一下" class="headerlink" title="放松一下"></a>放松一下</h2><div id=1 style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width:50%; height:46.9%;top:0;left:0;"src="//www.bilibili.com/blackboard/html5mobileplayer.html?aid=827167753&bvid=BV1wu4y1o7hd&cid=1160539552&page=1&danmaku=0&hideDanmakuButton=1&fjw=0" width="448" height="252"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="false"></iframe></div>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题</title>
      <link href="/2023/07/18/leetcode%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/07/18/leetcode%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="剑指offer"><a href="#剑指offer" class="headerlink" title="剑指offer"></a>剑指offer</h2><h3 id="JZ3-数组中重复的数字"><a href="#JZ3-数组中重复的数字" class="headerlink" title="JZ3 数组中重复的数字"></a>JZ3 数组中重复的数字</h3><p>在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组[2,3,1,0,2,5,3]，那么对应的输出是2或者3。存在不合法的输入的话输出-1<br>数据范围：0≤n≤10000进阶：时间复杂度O(n) ，空间复杂度O(n)<br>输入：[2,3,1,0,2,5,3]返回值：2说明：2或3都是对的</p><p>可以用java set</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">duplicate</span> <span class="params">(<span class="type">int</span>[] numbers)</span> &#123;</span><br><span class="line">        HashSet&lt;Integer&gt; hashSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i:numbers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!hashSet.add(i))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="JZ4-二维数组中的查找"><a href="#JZ4-二维数组中的查找" class="headerlink" title="JZ4 二维数组中的查找"></a>JZ4 二维数组中的查找</h3><p>在一个二维数组array中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。<br>[[ 1, 2, 8, 9],<br> [ 2, 4, 9,12],<br> [ 4, 7,10,13],<br> [ 6, 8,11,15]]<br>给定 target &#x3D; 7，返回 true。给定 target &#x3D; 3，返回 false。<br>数据范围：矩阵的长宽满足0≤n,m≤500，矩阵中的值满足0≤val≤10^9<br>进阶：空间复杂度 O(1) ，时间复杂度O(n+m)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 逐行二分查找</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = array.length-<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> mid;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (array[mid] == target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (array[mid] &lt; target) l = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> r = mid-<span class="number">1</span>;   <span class="comment">// array[mid] &gt; target</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">Find</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[][] array)</span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> (array[<span class="number">0</span>].length == <span class="number">0</span> || array[<span class="number">0</span>][<span class="number">0</span>] &gt; target) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] a:array)&#123;</span><br><span class="line">        <span class="keyword">if</span> (binarySearch(target,a)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从左下角开始,利用数组特性</span></span><br><span class="line"><span class="comment">// current &lt; target 向右查找</span></span><br><span class="line"><span class="comment">// current &gt; target 向左查找</span></span><br></pre></td></tr></table></figure><h3 id="JZ5-替换空格"><a href="#JZ5-替换空格" class="headerlink" title="JZ5 替换空格"></a>JZ5 替换空格</h3><p>请实现一个函数，将一个字符串s中的每个空格替换成“%20”。<br>例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。<br>数据范围:0≤len(s)≤1000。<br>保证字符串中的字符为大写英文字母、小写英文字母和空格中的一种。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">replaceSpace</span> <span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;%20&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>输入一个链表的头节点，按链表从尾到头的顺序返回每个节点的值（用数组返回）。<br>如输入{1,2,3}的链表如下图:<br><img src="https://uploadfiles.nowcoder.com/images/20210717/557336_1626506480516/103D87B58E565E87DEFA9DD0B822C55F"><br>返回一个数组为[3,2,1], 0 &lt;&#x3D; 链表长度 &lt;&#x3D; 10000</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//public static ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ff</span><span class="params">(ListNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">        ff(node.next);</span><br><span class="line">        arrayList.add(node.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title function_">printListFromTailToHead</span><span class="params">(ListNode listNode)</span> &#123;</span><br><span class="line">    ff(listNode);</span><br><span class="line">    <span class="keyword">return</span> arrayList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="企业真题"><a href="#企业真题" class="headerlink" title="企业真题"></a>企业真题</h2><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>learn html css javascript</title>
      <link href="/2023/07/17/learn-javascript/"/>
      <url>/2023/07/17/learn-javascript/</url>
      
        <content type="html"><![CDATA[<p>随便记录一点学习过的 html css js 相关内容.</p><span id="more"></span><h4 id="var-的覆盖"><a href="#var-的覆盖" class="headerlink" title="var 的覆盖"></a>var 的覆盖</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> a <span class="comment">// a -&gt; undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">// 1 F12查看</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">2</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>(a)<span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>Conclusion： js 允许重复声明变量，但只进行第一次的声明。可以重复赋值进行覆盖。</p><h4 id="时间按钮"><a href="#时间按钮" class="headerlink" title="时间按钮"></a>时间按钮</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&quot;display: block;margin: auto;&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">onmouseover</span>=<span class="string">&quot;mytimefunc1()&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">onmouseout</span>=<span class="string">&quot;mytimefunc2()&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span> time <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mytime&quot;</span>&gt;</span>current time is?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">mytimefunc1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;mytime&quot;</span>).<span class="property">innerHTML</span>=<span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">mytimefunc2</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;mytime&quot;</span>).<span class="property">innerHTML</span>=<span class="string">&quot;current time is?&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><button style="display: block;margin: auto;"        onmouseover="mytimefunc1()"        onmouseout="mytimefunc2()"        > time </button></p><p style="text-align: center;" id="mytime">current time is?</p><script>    function mytimefunc1(){        document.getElementById("mytime").innerHTML=Date();    }    function mytimefunc2(){        document.getElementById("mytime").innerHTML="current time is?";    }</script>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 相关</title>
      <link href="/2023/07/13/python%20%E7%9B%B8%E5%85%B3/"/>
      <url>/2023/07/13/python%20%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<p>TO BE WRITTEN…</p><span id="more"></span><h3 id="打包依赖"><a href="#打包依赖" class="headerlink" title="打包依赖"></a>打包依赖</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list --<span class="built_in">format</span>=freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><h3 id="小说-txt-文件分段"><a href="#小说-txt-文件分段" class="headerlink" title="小说 .txt 文件分段"></a>小说 .txt 文件分段</h3><p>最近在看小说，在网络上下载了<code>.txt</code>文件到kindle上看，结果发现文字段落间没有空白行╮(╯_╰)╭，于是乎，只能自己动手了。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">process</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;novel.txt&quot;</span>, <span class="string">&quot;rt&quot;</span>, encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        lines = f.readlines()</span><br><span class="line">        <span class="comment"># 由于原文中存在 \n 独自成一行，strip()过滤后仍会留下空的元素</span></span><br><span class="line">        new_lines = [line.strip() + <span class="string">&quot;\n\n&quot;</span> <span class="keyword">for</span> line <span class="keyword">in</span> lines]</span><br><span class="line">        <span class="comment"># 每两行文字间空一行</span></span><br><span class="line">        <span class="comment"># new_lines = [line + &quot;\n&quot; for line in filter(lambda x: x.strip(), lines)]</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;wt&quot;</span>, encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.writelines(new_lines)</span><br><span class="line">process()</span><br></pre></td></tr></table></figure><h3 id="漫画-图片纵向拼接"><a href="#漫画-图片纵向拼接" class="headerlink" title="漫画 图片纵向拼接"></a>漫画 图片纵向拼接</h3><p>最近在看漫画，网页端和手机端看着都不舒服，于是把漫画的<code>.jpg</code>文件爬取下来，再纵向拼接成一张图来看。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TO BE WRITTEN...</span><br></pre></td></tr></table></figure><h3 id="Kindle-epub-文件分段"><a href="#Kindle-epub-文件分段" class="headerlink" title="Kindle .epub 文件分段"></a>Kindle .epub 文件分段</h3><p>最近又在看小说，这次是 .epub 文件，段与段之间还是没有空白行，看着很难受 (\╯﹏╰)—\，于是写个脚本处理一下。</p><h4 id="epub文件结构"><a href="#epub文件结构" class="headerlink" title=".epub文件结构"></a>.epub文件结构</h4><p>将 <code>.epub</code> 文件当压缩包打开，可以看到，文件目录如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">—— META-INF</span><br><span class="line">—— OEBPS</span><br><span class="line">   —— Images</span><br><span class="line">   —— Styles</span><br><span class="line">   —— Test &lt;-- 里面是想要修改的.html文件</span><br></pre></td></tr></table></figure><p>.epub 文件中文字内容是以.html的形式存在的(其实就是把一群html页面打包了)</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">zip_epub</span>():</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置EPUB文件名和文件路径</span></span><br><span class="line">    epub_file = <span class="string">&quot;src/New The Little Prince.epub&quot;</span></span><br><span class="line">    epub_folder = <span class="string">&quot;src/New The Little Prince&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个新的EPUB文件</span></span><br><span class="line">    <span class="keyword">with</span> zipfile.ZipFile(epub_file, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> new_epub:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历EPUB文件夹中的所有文件和文件夹，并添加到新的EPUB文件中</span></span><br><span class="line">        <span class="keyword">for</span> folder_name, sub_folders, file_names <span class="keyword">in</span> os.walk(epub_folder):</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 遍历文件夹中的所有文件，并添加到新的EPUB文件中</span></span><br><span class="line">            <span class="keyword">for</span> file_name <span class="keyword">in</span> file_names:</span><br><span class="line">                <span class="comment"># 获取文件的完整路径</span></span><br><span class="line">                file_path = os.path.join(folder_name, file_name)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 将HTML文件放置在OEBPS/Text/文件夹下</span></span><br><span class="line">                <span class="keyword">if</span> file_name.endswith(<span class="string">&quot;.html&quot;</span>):</span><br><span class="line">                    file_path_in_epub = os.path.join(<span class="string">&quot;OEBPS&quot;</span>, <span class="string">&quot;Text&quot;</span>, file_name.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;_&quot;</span>).lower())</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    file_path_in_epub = os.path.relpath(file_path, epub_folder)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 将文件添加到新的EPUB文件中</span></span><br><span class="line">                new_epub.write(file_path, file_path_in_epub)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;EPUB文件已经生成完成！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process</span>():</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开epub文件</span></span><br><span class="line">    <span class="keyword">with</span> zipfile.ZipFile(<span class="string">&#x27;./src/The Little Prince.epub&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> myzip:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取文件列表</span></span><br><span class="line">        files = myzip.namelist()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历文件列表并提取html文件</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> file.endswith(<span class="string">&quot;.html&quot;</span>):</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 读取HTML文件内容</span></span><br><span class="line">                html_content = myzip.read(file)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 解析HTML文件</span></span><br><span class="line">                soup = bs4.BeautifulSoup(html_content, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 获取所有的&lt;p&gt;标签</span></span><br><span class="line">                p_tags = soup.find_all(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 在每两个&lt;p&gt;标签之间增加一个空白行</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(p_tags)):</span><br><span class="line">                    p_tags[i - <span class="number">1</span>].insert_after(soup.new_tag(<span class="string">&#x27;br&#x27;</span>))</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 将修改后的HTML保存到新文件中</span></span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;src/New The Little Prince/<span class="subst">&#123;file&#125;</span>&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> new_html_file:</span><br><span class="line">                    new_html_file.write(soup.prettify())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">process()</span><br><span class="line">zip_epub()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pip </tag>
            
            <tag> package </tag>
            
            <tag> dependency </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>饥荒服务器的搭建及自动化更新的shell脚本</title>
      <link href="/2023/07/03/%E9%A5%A5%E8%8D%92%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA%E5%8F%8A%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9B%B4%E6%96%B0%E7%9A%84shell%E8%84%9A%E6%9C%AC/"/>
      <url>/2023/07/03/%E9%A5%A5%E8%8D%92%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA%E5%8F%8A%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9B%B4%E6%96%B0%E7%9A%84shell%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>饥荒（dst）联机，尤其是 steam 饥荒联机的时候，除了房主，其他人往往是黄色，红色信号，延迟拉满，不时掉线，丢包严重（甚至无师自通地学会了瞬移），可谓是饱受摧残，痛不欲生。</p><span id="more"></span><p>残忍的现状将房主与他的小伙伴们分隔开，一层可悲的厚障壁悄无声息地出现。然而，自幼聪敏的房主怎会坐以待毙？！<del>\ 是时候展示真正的技术啦！！！</del></p><p>建立一个优质的饥荒联机服务器，拯救房主的小伙伴们于水深火热之中，已经迫在眉睫！</p><h3 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h3><p>CentOS 7.*</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install glibc.i686 libstdc++.i686 libcurl4-gnutls-dev.i686 libcurl.i686</span><br></pre></td></tr></table></figure><p>Ubuntu <em>.</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libstdc++6:i386 libgcc1:i386 libcurl4-gnutls-dev:i386 lib32gcc1</span><br></pre></td></tr></table></figure><h3 id="创建-steam-用户"><a href="#创建-steam-用户" class="headerlink" title="创建 steam 用户"></a>创建 steam 用户</h3><p>创建 steam 用户, -d 将 &#x2F;home&#x2F;steam 目录分配给用户 steam</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -d /home/steam steam</span><br></pre></td></tr></table></figure><p>修改 steam 用户密码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd steam</span><br></pre></td></tr></table></figure><p>切换至 steam 用户</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su steam</span><br></pre></td></tr></table></figure><p><del>删除 steam 用户, -r 并将所属目录删除</del></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel -r steam <span class="comment"># 有问题才需要删除！</span></span><br></pre></td></tr></table></figure><h3 id="安装-steamcmd"><a href="#安装-steamcmd" class="headerlink" title="安装 steamcmd"></a>安装 steamcmd</h3><p>创建 ~&#x2F;steamcmd 目录用于安装, ~ 是 steam 用户的所属目录,即 &#x2F;home&#x2F;steam</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/steamcmd</span><br></pre></td></tr></table></figure><p>下载 steamcmd 安装文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -P ~/steamcmd https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz</span><br></pre></td></tr></table></figure><p>解压压缩包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvzf steamcmd_linux.tar.gz</span><br></pre></td></tr></table></figure><h3 id="下载饥荒"><a href="#下载饥荒" class="headerlink" title="下载饥荒"></a>下载饥荒</h3><p>启动 SteamCMD</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./steamcmd.sh</span><br></pre></td></tr></table></figure><p>指定下载目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">force_install_dir /home/steam/common/dstserver</span><br></pre></td></tr></table></figure><p>匿名登录（首次登陆可能会 retry 几次，可以重启 steamcmd 再试）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">login anonymous</span><br></pre></td></tr></table></figure><p>下载饥荒</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app_update 343050 validate</span><br></pre></td></tr></table></figure><h3 id="解决依赖缺失"><a href="#解决依赖缺失" class="headerlink" title="解决依赖缺失"></a>解决依赖缺失</h3><p>启动服务器会显示缺少关键的组件 libcurl-gnutls.so.4</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/lib/libcurl.so.4 /home/steam/common/dstserver/bin/lib32/libcurl-gnutls.so.4</span><br></pre></td></tr></table></figure><h3 id="验证并生成相关文件"><a href="#验证并生成相关文件" class="headerlink" title="验证并生成相关文件"></a>验证并生成相关文件</h3><p>到此为止已经可以尝试启动饥荒了<del>（启动但不完全启动）</del><br>在 &#x2F;home&#x2F;steam&#x2F;common&#x2F;dstserver&#x2F;bin&#x2F; 目录下运行如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./dontstarve_dedicated_server_nullrenderer console_enabled -persistent_storage_root /home/steam/common/dstserver/dst_save -conf_dir dst -cluster Cluster_1 -shard Master</span><br></pre></td></tr></table></figure><p>意思是，启用控制台，保存在 dst_save 里，设置文件在 dst 里，用 Cluster_1 的存档 的地表</p><h3 id="上传存档-amp-cluster-token-txt"><a href="#上传存档-amp-cluster-token-txt" class="headerlink" title="上传存档 &amp; cluster_token.txt"></a>上传存档 &amp; cluster_token.txt</h3><p>将存档（Cluster_1） 上传到 dst_save 里<br>cluster_token.txt 是 klei 的服务器 token，放在 Cluster_1 目录下即可</p><h3 id="编写-自动更新-shell-脚本"><a href="#编写-自动更新-shell-脚本" class="headerlink" title="编写 自动更新 shell 脚本"></a>编写 自动更新 shell 脚本</h3><p><em><strong>脚本内容在文章末尾</strong></em><br>在 &#x2F;home&#x2F;steam&#x2F;common&#x2F;dstsever&#x2F;bin&#x2F; 目录下<br>把 stop update start 内容全部复制进去（记得检查一下）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim auto_update.sh</span><br></pre></td></tr></table></figure><p>赋予脚本执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 744 auto_update.sh</span><br></pre></td></tr></table></figure><h3 id="设置-crontab-定时任务"><a href="#设置-crontab-定时任务" class="headerlink" title="设置 crontab 定时任务"></a>设置 crontab 定时任务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>写入如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 4 * * *  /home/steam/common/dstserver/bin/auto_update.sh</span><br></pre></td></tr></table></figure><p>每天第 0 秒,第 4 小时启动一次自动更新脚本</p><hr><h3 id="饥荒自动更新-shell-脚本"><a href="#饥荒自动更新-shell-脚本" class="headerlink" title="饥荒自动更新 shell 脚本"></a>饥荒自动更新 shell 脚本</h3><p>放在与 dontstarve_dedicated_server_nullrenderer 同一个目录下<br>即 &#x2F;home&#x2F;steam&#x2F;common&#x2F;dstserver&#x2F;bin&#x2F; 目录下</p><figure class="highlight shell"><figcaption><span>stop</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pids=$(pgrep -f dontstarve)</span><br><span class="line">if [[ $pids != &quot;&quot; ]]</span><br><span class="line">then</span><br><span class="line">        for pid in $pids</span><br><span class="line">        do</span><br><span class="line">                kill -9 $pid</span><br><span class="line">        done</span><br><span class="line">fi</span><br><span class="line">sleep 10</span><br></pre></td></tr></table></figure><p>pgrep -f dontstarve 查找有 “dontstarve” 的进程号<br>变量 pids 不为空则 kill 掉所有相关进程<br>随后 sleep 10 秒 等待进程彻底结束</p><figure class="highlight shell"><figcaption><span>update</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~/steamcmd/steamcmd.sh \</span><br><span class="line">+force_install_dir /home/steam/common/dstserver \</span><br><span class="line">+login anonymous \</span><br><span class="line">+app_update 343050 validate \</span><br><span class="line">+quit</span><br></pre></td></tr></table></figure><p>运行 steamcmd.sh<br>随后执行下列命令：</p><ul><li>force_install_dir &#x2F;home&#x2F;steam&#x2F;common&#x2F;dstserver</li><li>login anonymous</li><li>app_update 343050 validate</li><li>quit</li></ul><p>分别对应：</p><ul><li>指定安装目录</li><li>匿名登录</li><li>更新饥荒</li><li>退出 steamcmd</li></ul><figure class="highlight shell"><figcaption><span>restart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/common/dstserver/bin/</span><br><span class="line">nohup ./dontstarve_dedicated_server_nullrenderer console_enabled -persistent_storage_root /home/steam/common/dstserver/dst_save -conf_dir dst -cluster Cluster_1 -shard Master &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">nohup ./dontstarve_dedicated_server_nullrenderer console_enabled -persistent_storage_root /home/steam/common/dstserver/dst_save -conf_dir dst -cluster Cluster_1 -shard Caves &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>在后台启动饥荒地表，洞穴服务器</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p>[1] <a href="https://zhuanlan.zhihu.com/p/146379848">https://zhuanlan.zhihu.com/p/146379848</a><br>[2] <a href="https://github.com/cuukenn/dontstarveserver">https://github.com/cuukenn/dontstarveserver</a><br>[3] <a href="https://forums.kleientertainment.com/forums/topic/59204-server-stopped-working-caves-beta/">Error, failed to change working directory to ..&#x2F;data</a></p><hr><blockquote><p>下次再遇到喜欢的人，千万要记得只做朋友，<br>不远不近的欣赏，淡淡的喜欢，<br>不至于到了最后，<br>乱了初心，败了芳华。</p><footer><strong>End </strong><cite>—— for my love</cite></footer></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> dst </tag>
            
            <tag> shell </tag>
            
            <tag> 饥荒 </tag>
            
            <tag> 联机 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的 vim 操作</title>
      <link href="/2023/07/01/%E5%B8%B8%E7%94%A8%E7%9A%84-vim-%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/07/01/%E5%B8%B8%E7%94%A8%E7%9A%84-vim-%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>已经时不时地，或多或少地用过 vim 了，但是对于 vim 的了解还相当浅薄，而且还经常忘记 vim 的常用命令，因此，在这里做一些记录。<span id="more"></span></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>好记性不如烂笔头</p></blockquote><h3 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">复制 y</span><br><span class="line">粘贴 p</span><br></pre></td></tr></table></figure><h3 id="撤回"><a href="#撤回" class="headerlink" title="撤回"></a>撤回</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo g -d, Github Pages custom domain 404</title>
      <link href="/2023/07/01/Hexo-g-d-Github-Pages-custom-domain-404/"/>
      <url>/2023/07/01/Hexo-g-d-Github-Pages-custom-domain-404/</url>
      
        <content type="html"><![CDATA[<p>设置 Github Pages 的 custom domain 后，使用 hexo g -d 上传更新，结果发现 404 了。  原因其实很简单，设置 custom domain 后，github 会在目录下生成一个 CNAME 文件，而本地没有这个文件，hexo g -d 更新后，CNAME 文件也就没了，于是 404。</p><span id="more"></span><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><blockquote><p>复制一个CNAME文件放在本地</p></blockquote><h3 id="胡言乱语"><a href="#胡言乱语" class="headerlink" title="胡言乱语"></a>胡言乱语</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">markdown 插入图片</span><br><span class="line">![](<span class="link">/2023/07/01/1688197856105.jpg &quot;有事吗？&quot;</span>)</span><br></pre></td></tr></table></figure><a id="single_image" href=""><h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3><blockquote><p><del>今天又是美好的一天</del></p></blockquote><img src="/img/1689863927614.jpg" class="" width="120" height="120" title="有事吗？">]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> github pages </tag>
            
            <tag> 404 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂物间</title>
      <link href="/2023/06/30/%E6%9D%82%E7%89%A9%E9%97%B4/"/>
      <url>/2023/06/30/%E6%9D%82%E7%89%A9%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<p>这里是一个杂物间，似乎什么东西也没有……</p><span id="more"></span><h3 id="TODO-List"><a href="#TODO-List" class="headerlink" title="TODO List"></a>TODO List</h3><ul><li>springboot starter </li><li></li></ul><h4 id="2023-8-11"><a href="#2023-8-11" class="headerlink" title="2023.8.11"></a>2023.8.11</h4><blockquote><p>彼时，他披星戴月，我仍是懵懂，浑浑噩噩</p><p>此刻，我孤灯夜点，寻寻觅觅</p></blockquote><blockquote><p>夕羡朝歌夜弦之高楼，后为倾国倾城之舞袖</p></blockquote><h4 id="2023-8-10"><a href="#2023-8-10" class="headerlink" title="2023.8.10"></a>2023.8.10</h4><blockquote><p>…….我们大多数人是一种：“没有好好享受过美好青春就要匆匆进入人生下一个关卡，仿佛永远不会停下来”的感觉。</p><p>而他们甚至也许永远都不需要在人生里闯什么关卡，只是单纯来体验这个美好的世界，普通人一旦停下来连体验美好的资格都没有。</p><p><a href="https://www.douban.com/group/topic/291461991/?_dtcc=1&_i=1678664NEcdLwd">https://www.douban.com/group/topic/291461991/?_dtcc=1&amp;_i=1678664NEcdLwd</a></p></blockquote><h4 id="2023-8-10-1"><a href="#2023-8-10-1" class="headerlink" title="2023.8.10"></a>2023.8.10</h4><blockquote><p>一些纯粹、有意思，单纯用好奇心驱动的东西，在你去要求它变得有用的那个瞬间，它就没有原来的乐趣了。</p></blockquote><blockquote><p>功利主义的人生就像一把没有刀鞘的的刀子，锋利但不好看。如果生活这盘菜，用这样的刀来一刀切，便是一种让人难以释怀的悲哀。</p></blockquote><h4 id="2023-7-20"><a href="#2023-7-20" class="headerlink" title="2023.7.20"></a>2023.7.20</h4><p><img src="https://picx.zhimg.com/v2-788631df1e0ebdfd8947aa6b7c6bf48d_1440w.jpg?source=172ae18b" alt="时间 过去 现在 未来" title="时间 过去 现在 未来"></p><h4 id="2023-7-20-1"><a href="#2023-7-20-1" class="headerlink" title="2023.7.20"></a>2023.7.20</h4><blockquote><p>人无远虑必有近忧…</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test it</title>
      <link href="/2023/06/30/test-it/"/>
      <url>/2023/06/30/test-it/</url>
      
        <content type="html"><![CDATA[<p>This is a test content.</p><span id="more"></span><h2 id="How-to-write"><a href="#How-to-write" class="headerlink" title="How to write?"></a>How to write?</h2><h3 id="Create-a-post"><a href="#Create-a-post" class="headerlink" title="Create a post"></a>Create a post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;your post name here&quot;</span></span><br></pre></td></tr></table></figure><h3 id="write-something"><a href="#write-something" class="headerlink" title="write something"></a>write something</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\``` languege</span><br><span class="line">content</span><br><span class="line">\``` </span><br><span class="line"></span><br><span class="line">info link: [info](https://ncuxie.github.io/)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">something should be here...</span><br></pre></td></tr></table></figure><h3 id="quote"><a href="#quote" class="headerlink" title="quote"></a>quote</h3><blockquote><p>真常应物，真常得性，<br>常应常静，常清静矣。</p></blockquote><h3 id="when"><a href="#when" class="headerlink" title="when"></a>when</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2021.11.17</span><br></pre></td></tr></table></figure><blockquote><p>从那天起，世界有所不同。</p></blockquote><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>This is a end.</p>]]></content>
      
      
      
        <tags>
            
            <tag> time </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/06/30/hello-world/"/>
      <url>/2023/06/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
